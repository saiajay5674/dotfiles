"*******************************************************
" SETTINGS

" Set mouse mode.
set mouse=a

if has('mouse_sgr')
  set ttymouse=sgr
endif

" Allow backspace to remove lines.
set backspace=indent,eol,start

" Ensure we are out of crappy vi compatible mode.
set nocompatible

" Automatically change working directory to the directory of the open file.
set autochdir

" Enable syntax highlighting.
syntax on

" Set startup colorscheme.
colorscheme codedark 

" Don't let text wrap when it hits the edge of the screen.
set nowrap

" Don't have vim store backup or swap files.
set nobackup
set noswapfile

" Briefly jump cursor to matching brace when typing completion brace.
set showmatch

" Decrease the time it takes to show the matching brace.
set matchtime=2

" Show line numbers by default.
set number

" Set encoding.
set encoding=utf-8

" Set font.
if has('gui_running')
    set guifont=Sauce\ Code\ Powerline:h12
endif

" Allow vim to recognize file types.
filetype on

" Allow vim to load plugins related to the detected file type.
filetype plugin on

" Allow vim to maintain a file's indent file as you edit it.
filetype indent on

" Highlight all results of a search within the file.
set hlsearch

" Set fold method to manual.
set foldmethod=manual

" Disable code folding.
set nofoldenable

" Set left and right option/alt keys to be meta keys
if has("gui_macvim")
    set macmeta
endif

" Whenever a buffer is written to a file run the syn script to synchronize with VM.

" Set softtabstop to 2 spaces.
set softtabstop=2

" Set shiftwidth to 2 spaces.
set shiftwidth=2

" Set tabstop to 2 spaces.
set tabstop=2

" Set expandtab by default.
set expandtab

" Show statusline always.
set laststatus=2

" No need to add 'g' to the end of substitute patterns to replace all occurances.
set gdefault

"*******************************************************

" COMMANDS

" LN will toggle line numbers on or off.
command! LN set nonumber!

" RC will re-source this .vimrc file.
command! RC :source $MYVIMRC

" W will force a write to a file you do not have permissions to modify.
command! W w !sudo tee % > /dev/null

"*******************************************************
"*******************************************************

" PLUGIN SETTINGS

" Invoke pathogen to load plugins.
execute pathogen#infect()

"-=-=-= syntastic =-=-=-

let g:syntastic_typescript_tsc_fname = ''
let g:syntastic_javascript_checkers = ['eslint']

" Override eslint with local version where necessary.
let local_eslint = finddir('node_modules', '.;') . '/.bin/eslint'
if matchstr(local_eslint, "^\/\\w") == ''
  let local_eslint = getcwd() . "/" . local_eslint
endif
if executable(local_eslint)
  let g:syntastic_javascript_eslint_exec = local_eslint
endif

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

"-=-=-= vim-jsx =-=-=-

" Enable JSX highlighting in .js files, not just .jsx.
let g:jsx_ext_required = 0

"-=-=-= typescript-vim =-=-=-

let g:typescript_compiler_options = '--module commonjs --target ES5'

"-=-=-= localvimrc =-=-=-

" Don't ask when sourcing .lvimrc files.
let g:localvimrc_ask = 0

"-=-=-= AIRLINE/LIGHTLINE/PROMPTLINE =-=-=-

" Populate powerline symbols.
"let g:airline_powerline_fonts = 1

let g:airline_theme = 'codedark'

let g:promptline_preset = {
    \'a' : [ promptline#slices#user() ],
    \'c' : [ promptline#slices#cwd() ],
    \'y' : [ promptline#slices#vcs_branch(), promptline#slices#git_status() ]}
    "\'b' : [ promptline#slices#host() ],

let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'component': {
      \   'readonly': '%{&readonly?"":""}',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ }

function! MyModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! MyFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

"augroup AutoSyntastic
  "autocmd!
  "autocmd BufWritePost *.c,*.cpp call s:syntastic()
"augroup END
"function! s:syntastic()
  "SyntasticCheck
  "call lightline#update()
"endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

"-=-=-= INDENT GUIDES =-=-=-

" Tell indent-guides plugin to start showing guides at 2 levels of indentation.
let g:indent_guides_start_level = 1

" Tell indent-guides plugin to draw guides one character in width.
let g:indent_guides_guide_size = 1

" Tell indent-guides to startup with VIM.
let g:indent_guides_enable_on_vim_startup = 1

" Set background colors manually since I rarely change my color scheme.
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=1002
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=1003

